name: Cargo Cache
description: Cache cargo build files and the registry
inputs:
  cache-group:
    description: |
      The group of the cache, defaults to the job ID.
      If you want two jobs to share the same cache, give them the same group name.
    required: false
    default: ${{ github.job }}
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: composite
  steps:
    # The `Cargo.lock` file contains the exact crates used as dependencies.
    # It is important to use for the caching key, because it might become outdated otherwise.
    # If only the `Cargo.toml` file was used, patch releases of crates could cause unnecessary re-compiles.
    # Therefore, if the `Cargo.lock` file does not yet exist (e.g. for libraries), we need to create it first.
    # If the `Cargo.lock` file has been commited to the repo we reuse it to reproduce the same scenario.
    - name: Create Cargo.lock file
      shell: bash
      run: |
        if [ -f "Cargo.lock" ]; then
            echo "Reusing already existing Cargo.lock file."
        else 
            echo "Cargo.lock file does not exist, creating it..."

            # Check if cargo is installed
            cargo --version

            if [ $? -eq 0 ]; then
                # Create Cargo.lock file
                cargo update
                exit $?
            else
                echo "Cargo is not installed!" >&2
                echo "  help: Try using the 'actions-rs/toolchain@v1' action before this one." >&2
                exit 1
            fi
        fi

    # See <https://github.com/actions/cache>.
    - name: Create cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        # Update the cache every time the `Cargo.lock` file changes (i.e., the dependencies change).
        # We also include the `Cargo.toml` files in the hash in case the compile configurations change.
        key: ${{ runner.os }}-${{ inputs.cache-group }}-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
        # Restore caches from the same group.
        restore-keys: |
          ${{ runner.os }}-${{ inputs.cache-group }}-${{ hashFiles('**/Cargo.toml') }}-
          ${{ runner.os }}-${{ inputs.cache-group }}-
