name: Cargo Cache
description: Cache cargo build files and the registry
inputs:
  cache-group:
    description: |
      The group of the cache, defaults to a unique identifier for the workflow job.
      If you want two jobs to share the same cache, give them the same group name.
    required: false
  cargo-home:
    description: |
      The location of the Cargo cache files.
      If you specify the `CARGO_HOME` env variable for your commands, you need to set it here too.
      This must NOT end with the trailing slash of the directory.
      Defaults to `~/.cargo`.
    required: false
    default: ~/.cargo
  cargo-target-dir:
    description: |
      Location of where to place all generated artifacts, relative to the current working directory. 
      If you specify the `CARGO_TARGET_DIR` env variable for your commands, you need to set it here too.
      This must NOT end with the trailing slash of the directory.
      Defaults to `target`.
    required: false
    default: target
  save-always:
    description: |
      Run the post step to save the cache even if another step before fails.
      Defaults to `true`.
    required: false
    default: "true"
  save-if:
    description: |
      A condition to determine whether the new cache should be saved.
      If it evaluates to `false`, the cache is only loaded.
    required: false
    default: "true"
outputs:
  cache-hit:
    description: |
      A boolean value to indicate if an exact match was found for the key.
      Passed through from the `actions/cache` action.
    value: ${{ steps.cache.outputs.random-number }}
runs:
  using: composite
  steps:
    # The `Cargo.lock` file contains the exact crates used as dependencies.
    # It is important to use for the caching key, because it might become outdated otherwise.
    # If only the `Cargo.toml` file was used, patch releases of crates could cause unnecessary re-compiles.
    # Therefore, if the `Cargo.lock` file does not yet exist (e.g. for libraries), we need to create it first.
    # If the `Cargo.lock` file has been committed to the repo we reuse it to reproduce the same scenario.
    - name: Create Cargo.lock file
      shell: bash
      run: |
        if [ -f "Cargo.lock" ]; then
            echo "Reusing already existing Cargo.lock file."
        else 
            echo "Cargo.lock file does not exist, creating it..."

            # Check if cargo is installed
            cargo --version

            if [ $? -eq 0 ]; then
                # Create Cargo.lock file
                cargo update
                exit $?
            else
                echo "Cargo is not installed!" >&2
                echo "  help: Try using the 'dtolnay/rust-toolchain@master' action before this one." >&2
                exit 1
            fi
        fi

    # The dependencies are recompiled if a new Rust version is used
    # This steps determines the rustc and cargo version to include it in the cache key
    - name: Get cargo version
      id: rust-version
      shell: bash
      run: |
        # Print version once for debugging.
        cargo --version
        rustc --version

        # Make a temporary file and save its path.
        versions=$(mktemp)

        # Save the version output of both tools to the temporary file. We need both versions
        # because sometimes one tool gets updated in a patch update and the other does not.
        cargo --version >> $versions
        rustc --version >> $versions

        # Calculate the checksum of the entire file. This is a unique identifier that will change
        # if either of the above outputs change. (We also use `cut` to extract just the checksum,
        # ignoring the rest of `cksum`'s output.)
        sum=$(cksum $versions | cut -f 1 -d ' ')

        # Write the extracted version to a GitHub output variable.
        # See <https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions>.
        echo "rust-version=$sum" >> "${GITHUB_OUTPUT}"

    # If the workflow file's contents change, the new version's jobs should be considered distinct.
    - name: Get workflow path
      shell: bash
      run: |
        workflow_ref='${{ github.workflow_ref }}'
        # Strip git ref suffix
        workflow_abs_path="${workflow_ref%%@*}"
        # Strip repository prefix
        echo "workflow_path=${workflow_abs_path#'${{ github.repository }}/'}" >> "${GITHUB_ENV}"

    - name: Determine cache group
      id: cache-group
      shell: bash
      run: |
        if [ -n '${{ inputs.cache-group }}' ]; then
          # Use the `cache-group` input if it was provided.
          echo 'cache-group=${{ inputs.cache-group }}' >> "${GITHUB_OUTPUT}"
        else
          # If not, fall back to a unique identifier for the workflow job.
          echo 'cache-group=${{ hashFiles(env.workflow_path) }}-${{ github.job }}-${{ strategy.job-index }}' >> "${GITHUB_OUTPUT}"
        fi

    # If the cache should also be saved, we use the cache action
    # See <https://github.com/actions/cache>.
    - name: Restore and save cache
      id: cache
      uses: actions/cache@v4
      if: ${{ inputs.save-if == 'true' }}
      with:
        save-always: ${{ inputs.save-always }}
        path: |
          ${{ inputs.cargo-home }}/bin/
          ${{ inputs.cargo-home }}/registry/index/
          ${{ inputs.cargo-home }}/registry/cache/
          ${{ inputs.cargo-home }}/git/db/
          ${{ inputs.cargo-target-dir }}/
        key: ${{ runner.os }}-${{ steps.rust-version.outputs.rust-version }}-${{ steps.cache-group.outputs.cache-group }}-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ steps.rust-version.outputs.rust-version }}-${{ steps.cache-group.outputs.cache-group }}-${{ hashFiles('**/Cargo.toml') }}-
          ${{ runner.os }}-${{ steps.rust-version.outputs.rust-version }}-${{ steps.cache-group.outputs.cache-group }}-

    # Otherwise, we only restore the cache
    # See <https://github.com/actions/cache/tree/main/restore>.
    - name: Restore cache
      id: cache-restore
      uses: actions/cache/restore@v4
      if: ${{ inputs.save-if != 'true' }}
      with:
        path: |
          ${{ inputs.cargo-home }}/bin/
          ${{ inputs.cargo-home }}/registry/index/
          ${{ inputs.cargo-home }}/registry/cache/
          ${{ inputs.cargo-home }}/git/db/
          ${{ inputs.cargo-target-dir }}/
        key: ${{ runner.os }}-${{ steps.rust-version.outputs.rust-version }}-${{ steps.cache-group.outputs.cache-group }}-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ steps.rust-version.outputs.rust-version }}-${{ steps.cache-group.outputs.cache-group }}-${{ hashFiles('**/Cargo.toml') }}-
          ${{ runner.os }}-${{ steps.rust-version.outputs.rust-version }}-${{ steps.cache-group.outputs.cache-group }}-
